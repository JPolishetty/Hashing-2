class Solution {
    public int findMaxLength(int[] nums) {
        //if nums is empty or has only one element, return 0
        if(nums == null || nums.length == 1){
            return 0;
        }
        //By adding 1 for element 1, and substract 1 for every 0, we get same sum after reaching equal number of 0's and 1's 
        int rSumArray[] = new int[nums.length];
        int rSum = 0, length=0;
        //creating hashmap to keep track of running sum at certain index
        HashMap<Integer, Integer> hm = new HashMap<>();
        //As we starting sum from 0, add o and its index as -1 in hashmap 
        hm.put(0, -1);
        for(int i=0;i<nums.length;i++){
            //if nums[i] is 1, adding 1 or substracting 1
            if(nums[i] == 0){
                rSum = rSum - 1;
            }
            else{
                rSum = rSum + 1;
            }
            rSumArray[i] = rSum;
        }
        for(int i=0;i<rSumArray.length;i++){
            //if we have same running sum at different idexes, then we have same no. of 1's and 0's
            if(hm.containsKey(rSumArray[i])){
                //storing max of before subarray and current subarray length
                length = Math.max(length, (i - hm.get(rSumArray[i])));
            }
            else{
                hm.put(rSumArray[i], i);
            }
        }
        return length;

    }
}
